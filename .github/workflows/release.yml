name: |
  Release a new version of ProLock 

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

# We need this to be able to create releases:
permissions:
  contents: write

jobs:
  verify_github_release_exists:
    runs-on: [ubuntu-latest, macos-latest, macos-13, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: |
          ref_name=${{ github.ref_name }}
          # Remove the 'v' prefix if it exists
          version=${ref_name#v}
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Show the version
        run: |
          echo "version is: $VERSION"
      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        # Improve this check as it could get confused by versions of dependencies
        run: |
          if ! grep -q "version = \"$VERSION\"" Cargo.toml; then
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi
    #   - name: Create GitHub release
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     run: gh release create $VERSION --draft --verify-tag --title $VERSION
    #
    # FIXME the check is still missing!!
    #    outputs:
    #      version: ${{ env.VERSION }}

      - name: install cargo-bundle
        run: |
            cargo install cargo-bundle 
        
      - name: Build release binary
        shell: bash
        run: |
          ${{ env.CARGO }} bundle --release ${{ env.TARGET_FLAGS }}
        
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
              bundle_dir="target/${{ matrix.target }}/release/bundle/osx/ProLock.app"
          elif [ "${{ matrix.os }}" = "macos-13" ]; then
              bundle_dir="target/${{ matrix.target }}/release/bundle/macos/ProLock.app"
          else
              bundle_dir="target/${{ matrix.target }}/release/bundle"
          fi

          echo "BUNDLE_DIR=$bundle_dir" >> $GITHUB_ENV

      - name: Determine archive name
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          echo "ARCHIVE=prolock-$version-${{ matrix.target }}" >> $GITHUB_ENV

      - name: Create directory for archive
        shell: bash
        run: |
          mkdir -p "$ARCHIVE"/doc
          cp -R "$BUNDLE_DIR" "$ARCHIVE"/
          cp {README.md,LICENSE-APACHE,LICENSE-MIT} "$ARCHIVE"/
          cp CHANGELOG.md "$ARCHIVE"/doc/

      - name: Build archive (Unix)
        shell: bash
        if: matrix.os != 'windows-latest'
        run: |
          tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
          shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
          echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

      - name: Upload release archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          gh release upload "$version" ${{ env.ASSET }} ${{ env.ASSET_SUM }}
