name: |
  Release a new version of ProLock 

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

# We need this to be able to create releases:
permissions:
  contents: write

jobs:
  build_bundle_and_upload_to_github_release:
    strategy:
      matrix:
        runner: [macos-latest, macos-13] #, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Derive release name and cargo version from the tag
        run: |
          ref_name=${{ github.ref_name }}
          echo "RELEASE_NAME=$ref_name" >> $GITHUB_ENV

          # Remove the 'v' prefix if it exists
          cargo_version=${ref_name#v}
          echo "CARGO_VERSION=$cargo_version" >> $GITHUB_ENV

      - name: Show the version
        run: |
          echo "cargo version is: ${{ env.CARGO_VERSION }}"
          echo "release name is: ${{ env.RELEASE_NAME }}"

      - name: Check that $CARGO_VERSION and version in Cargo.toml are the same
        shell: bash
        # Improve this check as it could get confused by versions of dependencies
        run: |
          if ! grep -q "version = \"${{ env.CARGO_VERSION }}\"" Cargo.toml; then
            echo "Value of CARGO_VERSION does not match Cargo.toml" >&2
            exit 1
          fi

      - name: install cargo-bundle
        run: |
            cargo install cargo-bundle 
        
      - name: Build release binary
        shell: bash
        run: |
          cargo bundle --release
          ls -l target/release/bundle

          if [ "${{ matrix.os }}" = "macos-latest" ]; then
              bundle_dir="target/release/bundle/osx/ProLock.app"
          elif [ "${{ matrix.os }}" = "macos-13" ]; then
              bundle_dir="target/release/bundle/macos/ProLock.app"
          else
              bundle_dir="target/release/bundle"
          fi

          echo "BUNDLE_DIR=$bundle_dir" >> $GITHUB_ENV

      - name: Determine archive name
        shell: bash
        run: |
          echo "ARCHIVE=prolock-${{ env.CARGO_VERSION }}-${{ matrix.target }}" >> $GITHUB_ENV

      - name: Create directory for archive
        shell: bash
        run: |
          mkdir -p "$ARCHIVE"/doc
          cp -R "$BUNDLE_DIR" "$ARCHIVE"/
          cp {README.md,LICENSE-APACHE,LICENSE-MIT} "$ARCHIVE"/
          cp CHANGELOG.md "$ARCHIVE"/doc/


      - name: Build archive (Windows)
        shell: bash
        if: matrix.os == 'windows-latest'
        run: |
          7z a "$ARCHIVE.zip" "$ARCHIVE"
          certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
          echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.zip.sha256" >> $GITHUB_ENV

      - name: Build archive (Unix)
        shell: bash
        if: matrix.os != 'windows-latest'
        run: |
          tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
          shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
          echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

      - name: Upload release archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          gh release upload ${{ env.RELEASE_NAME }} ${{ env.ASSET }} ${{ env.ASSET_SUM }}
